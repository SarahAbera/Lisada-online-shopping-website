"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataStorage = void 0;
/**
 * Storage all metadatas of this library.
 */
class MetadataStorage {
    constructor() {
        this.sanitationMetadataStore = new Map();
        this.constraintMetadatasStore = new Map();
    }
    addMetadata(metadata, type) {
        if (!this.sanitationMetadataStore.has(metadata.target)) {
            this.sanitationMetadataStore.set(metadata.target, []);
        }
        if (!this.constraintMetadatasStore.has(metadata.target)) {
            this.constraintMetadatasStore.set(metadata.target, []);
        }
        switch (type) {
            case 'sanitation':
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.sanitationMetadataStore.get(metadata.target).push(metadata);
                break;
            case 'constraint':
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                this.constraintMetadatasStore.get(metadata.target).push(metadata);
                try {
                    metadata.instance = new metadata.target();
                }
                catch (_a) {
                    throw Error('Error while registering decorator metadata, cannot create CustomSanitizer instance from received class definition.');
                }
                break;
        }
    }
    /**
     * Gets all sanitation metadatas for the given targetConstructor with the given groups.
     *
     * @param instanceConstructor the constructor of the initiated class
     */
    getSanitizeMetadatasForClassInstance(classInstance) {
        const targetSanitationMetadata = this.sanitationMetadataStore.get(classInstance['__proto__']) || [];
        const parentSanitationMetadata = this.sanitationMetadataStore.get(classInstance['__proto__']['__proto__']) || [];
        return [...targetSanitationMetadata, ...parentSanitationMetadata];
    }
    /**
     * Gets all sanitizator constraints for the given object.
     */
    getSanitizeConstraintsForClassConstructor(target) {
        return this.constraintMetadatasStore.get(target) || [];
    }
    /**
     * Removes all the currently saved metadata about the classes.
     */
    reset() {
        this.sanitationMetadataStore = new Map();
        this.constraintMetadatasStore = new Map();
    }
}
exports.MetadataStorage = MetadataStorage;
//# sourceMappingURL=metadata-storage.class.js.map