import { SanitationMetadata, ConstraintMetadata } from './interfaces';
/**
 * Storage all metadatas of this library.
 */
export declare class MetadataStorage {
    private sanitationMetadataStore;
    private constraintMetadatasStore;
    /**
     * Inserts the metadata to the correct place in our internal store. If there
     * is no metadata for the given target it create an empty sub-store first.
     * @param metadata
     * @param type
     */
    addMetadata(metadata: SanitationMetadata, type: 'sanitation'): void;
    addMetadata(metadata: ConstraintMetadata, type: 'constraint'): void;
    /**
     * Gets all sanitation metadatas for the given targetConstructor with the given groups.
     *
     * @param instanceConstructor the constructor of the initiated class
     */
    getSanitizeMetadatasForClassInstance(classInstance: Object): SanitationMetadata[];
    /**
     * Gets all sanitizator constraints for the given object.
     */
    getSanitizeConstraintsForClassConstructor(target: Function): ConstraintMetadata[];
    /**
     * Removes all the currently saved metadata about the classes.
     */
    reset(): void;
}
